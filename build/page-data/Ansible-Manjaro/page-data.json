{"componentChunkName":"component---src-templates-blog-post-js","path":"/Ansible-Manjaro/","webpackCompilationHash":"49226d8a7396f9c20661","result":{"data":{"site":{"siteMetadata":{"title":"https://thomasleonhighbaugh.me","author":"Thomas Leon Highbaugh"}},"markdownRemark":{"id":"6291f89a-1ba1-58df-b66b-a55786721876","excerpt":"And the Value of Structured Examples Initially I was resistant to using Ansible to provision anything other than virtual \nsystems I use for development purposes…","html":"<h3>And the Value of Structured Examples</h3>\n<p>Initially I was resistant to using <strong>Ansible</strong> to provision anything other than virtual\nsystems I use for development purposes, as I was under the impression there was need for\na central server (what my workstation or the hypervisor system work as) and I had not\nseen great examples of well structured <strong>Ansible</strong> playbooks from watching and reading the\njargon heavy, cringe-worthy documentation available for the project. While my frustrations\nwith the documentation is likely to become a blog post soon, it is worth noting here that\nI value well structured projects to a point I had not realized before having a word for the\nconcept of neaty organizing, topical directories. In frustration with an attempt to make a\nGUI for the Blasted Auto Installer, I looked up <strong>Ansible</strong> playbooks for pacman-based systems and\nfound an example that has changed my opinion about using <strong>Ansible</strong> completely. </p>\n<p>The Spark playbook, unrelated to <strong>Ansible</strong> Spark, structured itself in a way that was similar to\nthe approach I have recently started taking with SASS and React, where each role is separated\ninto its own directory. This is in opposition to a monolithic role file or set of haphazardly\narranged role files that were part of my prior confusion. Having some experience with <strong>Ansible</strong>\nfrom before, I used it as the basis for writing a playbook to provision my workstation and am\ncorrected in my dismissal of deploying <strong>Ansible</strong> for that purpose. Instead of being an unnecessary\npain to deploy in the context of a single machine and requiring a server (which when I\nread the docs lasted seemed imperative), I was able to set the target machine to the\nlocalhost! While the reader may be thinking, “Well DUH!” this was not inherently obvious to\nme before and since my knowledge of all things tech has been rapidly expanding recently, I\nwon’t be too hard on myself. Nonetheless, I now have an even more automated way to provision\nmy workstation that also features modular components, allowing for the creation of new playbooks\nrapidly without re-writing code. </p>\n<h3>Modularization is Key</h3>\n<p>The value of modularizing the components of a project like a Playbook may be less obvious\ndue to the extremely helpful error codes <strong>Ansible</strong> offers the user, but this is an\nexceptionally rare feature in my other efforts. By comparison, the most helpful Webpack\nwrapper I have used, Gatsby, does not have nearly as reliable or helpful error codes\n<em>and it is the most helpful I have seen!</em> When writing code that can be segmented as this Playbook, I like\nwriting it accordingly because it makes for a less frustrating debug process regardless of error codes.</p>\n<p>The other aspect of modular source code that draws me to using that paradigm almost exclusively,\nif possible, is that I can assess the entire function occuring in that file more easily if I am\nnot first forced to scroll through some massive file to find what I need. While for some scrolling\nthrough a directory with a lot of files may be harder, I find myself distracted by all the other\nthings I have to fix if I am scrolling through code and do not have that issue when that code\nis not in front of me. Or in the words of many,</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Out of sight, out of mind</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2>To Do</h2>\n<p>-[ ] Create extension to wrap the <code class=\"language-text\">sudo aura -Ax</code> command (used to install AUR packages without needing an AUR user or other work around for YAY not running for root)\n-[ ] refine deployment of Firejail to wrap less programs\n-[ ] add firejail wrapper to virt-manager\n-[ ] debug using fresh installs\n-[ ] create more elegant wrapper for dotbro (dotfile manager)\n-[ ] make branchs for my laptop, server and hypervisor systems</p>","frontmatter":{"title":"Manjaro Workstation Ansible Playbook","date":"August 20, 2019","description":"A playbook for provisioning my workstation that was written as a response to increasing frustrations with the other solutions."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Ansible-Manjaro/","previous":{"fields":{"slug":"/BlastedAutoInstaller/"},"frontmatter":{"title":"Blasted-Auto-Installer"}},"next":null}}}